#!/usr/bin/env ruby
# -*- mode: ruby -*-
#
# Copyright (c) 2009 OOHASHI Daichi <leque@katch.ne.jp>,
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the authors nor the names of its contributors
#    may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

require 'curses'

def usage(out, status)
   out.puts("usage: %s pager-command [args ...]" % File.basename($0))
   exit status
end

def copy(src, dst)
   src.each {|l| dst << l }
end

if ARGV.empty? then
   usage($stderr, 1)
elsif %w(-h --help).include?(ARGV.first) then
   usage($stdout, 0)
end


width = height = nil

begin
   scr = Curses.init_screen
   width = (scr.maxx - 1).to_f
   height = scr.maxy - 1
ensure
   Curses.close_screen
end

h = 0
buf = []

$stdin.each do |line|
   buf << line
   h += (line.chomp.length / width).ceil.to_i
   break if h > height
end

begin
   if h > height then
      IO.popen('-', 'w') do |child|
         if child then
            copy(buf, child)
            copy($stdin, child)
         else
            exec(*ARGV)
         end
      end
   else
      copy(buf, $stdout)
   end
rescue Errno::EPIPE then
      # ignore
end

exit 0
